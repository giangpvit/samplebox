<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="FrontTactilTouched desc" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="100"><Box name="SetPathLibFld" id="5" localization="8" tooltip="プロジェクトの Lib フォルダーに Python パスを通す" x="109" y="16"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.pathModified = False

    def onUnload(self):
        if self.pathModified and self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None

    def onInput_onStart(self):
        appFolder = self.behaviorAbsolutePath().replace(self.behaviorRelativePath(), "")
        self.folderName = os.path.join(appFolder, "lib")
        self.logger.info(self.folderName)
        if self.folderName not in sys.path:
            sys.path.insert(0, self.folderName)
            self.pathModified = True

        self.onReady()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="GSTT V1Beta" id="2" localization="8" tooltip="" x="871" y="113"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import os

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.keyPath = ''

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")
        pass

    def onUnload(self):
        #if os.environ.has_key("GOOGLE_APPLICATION_CREDENTIALS"):
         #   os.environ.pop("GOOGLE_APPLICATION_CREDENTIALS")
        pass

    def onInput_onStart(self):
        self.keyPath = self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("GoogleSTTKey")
        self.logger.info("onStart id:" + self.framemanager.getBehaviorPath(self.behaviorId))
        if (not os.path.exists(self.keyPath)):
            self.logger.info("onStart:" + self.keyPath)
            return

        self.getSpeechService()
        #results = json.loads(res)

    def getSpeechService(self):
        import httplib2
        import apiclient.discovery
        import apiclient.http
        import oauth2client.client

        OAUTH2_SCOPE = 'https://www.googleapis.com/auth/drive'
        FILENAME = self.framemanager.getBehaviorPath(self.behaviorId) + '/key2.json'
        MIMETYPE = 'text/plain'
        TITLE = 'My New Text Document'
        DESCRIPTION = 'A shiny new text document about hello world.'


        # Perform OAuth2.0 authorization flow.
        flow = oauth2client.client.flow_from_clientsecrets(CLIENT_SECRETS, OAUTH2_SCOPE)
        flow.redirect_uri = oauth2client.client.OOB_CALLBACK_URN
        authorize_url = flow.step1_get_authorize_url()
        self.logger.info('Go to the following link in your browser: ' + authorize_url)
        code = '4/rkhgFQPQRZcEXKfBv0LygijJREiBDA79yO8mYVp_DK4'
        credentials = flow.step2_exchange(code)


        # Create an authorized Drive API client.
        http = httplib2.Http()
        credentials.authorize(http)
        drive_service = apiclient.discovery.build('drive', 'v2', http=http)
        # Insert a file. Files are comprised of contents and metadata.
        # MediaFileUpload abstracts uploading file contents from a file on disk.
        media_body = apiclient.http.MediaFileUpload(
            FILENAME,
            mimetype=MIMETYPE,
            resumable=True
        )
        # The body contains the metadata for the file.
        body = {
          'title': TITLE,
          'description': DESCRIPTION,
        }

        # Perform the request and print the result.
        new_file = drive_service.files().insert(body=body, media_body=media_body).execute()
        self.logger.info(new_file)

    def startUpload(self):
        try:
            service = self.getSpeechService()
            self.logger.info("getSpeechService")
            results = service.files().list(
            pageSize=10,fields="nextPageToken, files(id, name)").execute()
            items = results.get('files', [])
            if not items:
                self.logger.info('No files found.')
            else:
                self.logger.info('Files:')
                for item in items:
                    self.logger.info('{0} ({1})'.format(item['name'], item['id']))

        except Exception as e:
            self.logger.info(str(e))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="Recognition" type="3" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" /><Output name="NonRecognition" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Parameter name="Timeout" inherits_from_parent="1" content_type="1" value="15" default_value="10" min="1" max="3600" tooltip="" id="6" /><Parameter name="GoogleSTTKey" inherits_from_parent="1" content_type="4" value="/driveapi.json" default_value="" tooltip="" id="7" /></Box><Box name="GDrivev3_quickStart_v2" id="1" localization="8" tooltip="" x="419" y="172"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json
import os
import time
import sys
sys.argv  = ['']
from datetime import datetime

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onUnload(self):
        self.framemanager = None

    def getTimeStamp(self):
        '''
        タイムスタンプ取得
        '''
        return datetime.now().strftime('%H:%M:%S').encode('utf-8')

    def onInput_onStart(self):
        self.getSpeechService()

    def getSpeechService(self):
        from apiclient import discovery
        import httplib2
        import apiclient.http
        import oauth2client

        # Path to the file to upload.
        #FILENAME = 'http://198.18.0.1/apps/samplebox-gsttre-61e0a8/behavior_1/' + 'behavior.xar'
        FILENAME = '/home/nao/.local/share/PackageManager/apps/biz_sbr_qna/' + 'behavior.xar'
        SCOPES = 'https://www.googleapis.com/auth/drive'
        CLIENT_SECRET_FILE = self.framemanager.getBehaviorPath(self.behaviorId) + '/driveapi.json'
        APPLICATION_NAME = 'Drive API Python Quickstart'

        # Metadata about the file.
        MIMETYPE = 'text/plain'
        TITLE = 'My New Behavior'
        DESCRIPTION = 'A google drive sample.'

       # Perform OAuth2.0 authorization flow.
        flow = oauth2client.client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.redirect_uri = oauth2client.client.OOB_CALLBACK_URN
        authorize_url = ''
        #authorize_url = flow.step1_get_authorize_url()
        self.logger.info('URL: ' + str(authorize_url))
        #return
        code = '4/LNcDVwxrZPC4tFWEOjEaUGhdhFsTuhHlRkUQNDKPVMs'
        credentials = flow.step2_exchange(code)

        http = credentials.authorize(httplib2.Http())
        drive_service = discovery.build('drive', 'v3', http=http)

        # Insert a file. Files are comprised of contents and metadata.
        # MediaFileUpload abstracts uploading file contents from a file on disk.
        media_body = apiclient.http.MediaFileUpload(
            FILENAME,
            mimetype=MIMETYPE,
            resumable=True
        )
        # The body contains the metadata for the file.
        body = {
            'name': 'behavior.xar',
          'title': TITLE,
          'description': DESCRIPTION,
        }

        # Perform the request and print the result.
        new_file = drive_service.files().create(body=body, media_body=media_body,fields='id').execute()
        self.logger.info(new_file)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="Recognition" type="3" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" /><Output name="NonRecognition" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Parameter name="Timeout" inherits_from_parent="1" content_type="1" value="15" default_value="10" min="1" max="3600" tooltip="" id="6" /><Parameter name="GoogleSTTKey" inherits_from_parent="1" content_type="4" value="/key2.json" default_value="" tooltip="" id="7" /></Box><Box name="GDrivev3_quickStart_v1" id="4" localization="8" tooltip="" x="963" y="245"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json
import os
import time
import sys
sys.argv  = ['']
from datetime import datetime

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.discovery_url = ('https://{api}.googleapis.com/$discovery/rest?'
            'version={apiVersion}')

    def onLoad(self):
        #try:
         #   import argparse
            #self.flags = argparse.ArgumentParser(parents=[oauth2client.tools.argparser]).parse_args()
        #except ImportError:
        self.flags = None


        self.framemanager = ALProxy("ALFrameManager")

    def onUnload(self):
        self.framemanager = None
        if os.environ.has_key("GOOGLE_APPLICATION_CREDENTIALS"):
            os.environ.pop("GOOGLE_APPLICATION_CREDENTIALS")

    def getTimeStamp(self):
        '''
        タイムスタンプ取得
        '''
        return datetime.now().strftime('%H:%M:%S').encode('utf-8')

    def onInput_onStart(self):
        self.getSpeechService()

    def getSpeechService(self):
        from apiclient import discovery
        import httplib2
        import apiclient.http
        import oauth2client

        try:
            import argparse
            self.flags = argparse.ArgumentParser(parents=[oauth2client.tools.argparser]).parse_args()
        except ImportError:
            self.flags = None

        # Path to the file to upload.
        #FILENAME = 'http://198.18.0.1/apps/243-3dc1b23/behavior_1/' + 'behavior.xar'
        FILENAME = '/Users/administrator/.local/share/choregraphe/VirtualRobot-150639/data/PackageManager/apps/243-3dc1b23/behavior_1/' + 'behavior.xar'
        self.logger.info(str(self.behaviorId))
        SCOPES = 'https://www.googleapis.com/auth/drive'
        CLIENT_SECRET_FILE = self.keyPath = self.framemanager.getBehaviorPath(self.behaviorId) + '/driveapi.json'
        APPLICATION_NAME = 'Drive API Python Quickstart'

        # Metadata about the file.
        MIMETYPE = 'text/plain'
        TITLE = 'My New Behavior'
        DESCRIPTION = 'A google drive sample.'

        credential_path = self.framemanager.getBehaviorPath(self.behaviorId) + 'drive-python-quickstart.json'

        store = oauth2client.file.Storage(credential_path)
        #store = file.Storage('storage.json')
        #store = Storage(credential_path)
        credentials = store.get()
        if not credentials or credentials.invalid:
            flow = oauth2client.client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
            flow.user_agent = APPLICATION_NAME

            if self.flags:
                self.logger.info("run_flow")
                credentials = oauth2client.tools.run_flow(flow, store, self.flags)
            else: # Needed only for compatibility with Python 2.6
                credentials = oauth2client.tools.run(flow, store)
                self.logger.info("run_flow Python 2.6")
            #print('Storing credentials to ' + credential_path)

        http = credentials.authorize(httplib2.Http())
        drive_service = discovery.build('drive', 'v3', http=http)
        self.logger.info("build")
        # Insert a file. Files are comprised of contents and metadata.
        # MediaFileUpload abstracts uploading file contents from a file on disk.
        media_body = apiclient.http.MediaFileUpload(
            FILENAME,
            mimetype=MIMETYPE,
            resumable=True
        )
        # The body contains the metadata for the file.
        body = {
            'name': 'key.json',
          'title': TITLE,
          'description': DESCRIPTION,
        }

        # Perform the request and print the result.
        new_file = drive_service.files().create(body=body, media_body=media_body,fields='id').execute()
        self.logger.info(new_file)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="Recognition" type="3" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" /><Output name="NonRecognition" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Parameter name="Timeout" inherits_from_parent="1" content_type="1" value="15" default_value="10" min="1" max="3600" tooltip="" id="6" /><Parameter name="GoogleSTTKey" inherits_from_parent="1" content_type="4" value="/key2.json" default_value="" tooltip="" id="7" /></Box><Box name="GetListFiles" id="6" localization="8" tooltip="" x="999" y="396"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        import os
        myPath = 'http://198.18.0.1/apps/zoetisvideos'
        for f in os.walk(myPath):
            self.logger.info("11111")
            for file in f:
                self.logger.info("File:")
                self.logger.info(file)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" /></Box><Link inputowner="0" indexofinput="5" outputowner="0" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>